@model IEnumerable<StainSaver.Models.PickUp>
@using StainSaver.Models
@{
    ViewData["Title"] = "Pending Pick-Ups";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string GetStatusClass(PickUpStatus status) =>
        status switch
        {
            PickUpStatus.DriverAssigned => "status-default",
            PickUpStatus.PickingUp => "status-warning",
            PickUpStatus.Completed => "status-success",
            _ => "status-default"
        };
}
<style>
    .order-card-col {
        flex: 0 0 auto;
        max-width: 380px;
        margin-right: 1.25rem;
        margin-bottom: 1.25rem;
    }
    .card-receipt {
        background: #ffffff;
        padding: 1.25rem 1.5rem;
        display: flex;
        flex-direction: column;
        height: 100%;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        border-radius: 0;
        box-shadow: none;
        border: 1px solid #265828; /* subtle border for separation */
    }
    /* Removed hover shadow */
    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #eaeaea;
        padding-bottom: 0.5rem;
        margin-bottom: 1rem;
    }
    .order-number {
        font-weight: 700;
        font-size: 1.3rem;
        color: #34495e;
        word-wrap: normal;
        overflow-wrap: normal;
        white-space: normal;
    }
    .order-status {
        font-weight: 700;
        font-size: 0.9rem;
        text-transform: uppercase;
        padding: 0.2rem 0.8rem;
        border-radius: 2px;
        user-select: none;
        min-width: 90px;
        text-align: center;
        letter-spacing: 0.05em;
        font-family: 'Segoe UI Semibold', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        word-wrap: normal;
        overflow-wrap: normal;
        white-space: normal;
        transition: background-color 0.3s ease;
    }
    /* New status colors */
    .status-default {
        background-color: #6c757d; /* Gray */
        color: #fff;
    }
    .status-warning {
        background-color: #fd7e14; /* Orange */
        color: #fff;
    }
    .status-success {
        background-color: #198754; /* Green */
        color: #fff;
    }
    .complain-description,
    .complain-type {
        font-size: 0.95rem;
        color: #4a5568;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        word-wrap: normal;
        overflow-wrap: normal;
        white-space: normal;
    }
    .complain-description i,
    .complain-type i {
        color: #2c3e50;
        font-size: 1.15rem;
        flex-shrink: 0;
    }
    .card-footer {
        margin-top: auto;
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
        padding-top: 1rem;
    }
    .btn-small {
        padding: 0.35rem 0.75rem;
        font-size: 0.9rem;
        border-radius: 4px; /* slightly rounded */
        font-weight: 600;
        transition: background-color 0.25s ease;
        border: none;
        cursor: pointer;
    }
    /* See Location button style */
    .btn-view-map {
        background-color: #0d6efd; /* Bootstrap primary blue */
        color: white;
    }
    .btn-view-map:hover {
        background-color: #0b5ed7;
        color: #fff;
    }
    /* Pick-up button style (warning orange) */
    .btn-pickup {
        background-color: #fd7e14; /* Bootstrap warning orange */
        color: white;
    }
    .btn-pickup:hover {
        background-color: #e06c0a;
        color: #fff;
    }
    /* Confirm Item button style (success green) */
    .btn-confirm {
        background-color: #198754; /* Bootstrap success green */
        color: white;
    }
    .btn-confirm:hover {
        background-color: #146c43;
        color: #fff;
    }
    .d-flex.flex-column.flex-lg-row.flex-lg-wrap.overflow-auto.pb-3 {
        flex-direction: column;
    }
</style>
<div class="container-fluid">
    <div class="d-flex align-items-center justify-content-between px-3 py-3 mb-4" style="background-color:#265828;">
        <h2 class="mb-0 text-white">Lost and Found Items Pick-Ups</h2>
        <a href="/" class="btn btn-outline-light"><i class="fas fa-arrow-left me-2"></i>Back to Dashboard</a>
    </div>
</div>
<div class="container-fluid">
    @if (!Model.Any())
    {
        <div class="alert alert-info">No pending pick-ups at the moment.</div>
    }
    else
    {
        <div class="d-flex flex-column flex-lg-row flex-lg-wrap overflow-auto pb-3">
            @foreach (var pickUp in Model)
            {
                <div class="order-card-col" data-pickup-id="@pickUp.PickUpId">
                    <div class="card card-receipt">
                        <div class="card-header">
                            <div class="order-number">#@pickUp.ReferenceNumber</div>
                            <div class="order-status @GetStatusClass(pickUp.Status)">
                                @pickUp.Status.ToString()
                            </div>
                        </div>
                        <div class="complain-description"><i class="fas fa-user"></i> @pickUp.Complain?.Customer?.FullName</div>
                        <div class="complain-description"><i class="fas fa-phone"></i> @pickUp.Complain?.Customer?.PhoneNumber</div>
                        <div class="complain-description"><i class="fas fa-envelope"></i> @pickUp.Complain?.Customer?.Email</div>
                        <div class="complain-description"><i class="fas fa-location"></i> @pickUp.Complain?.Customer?.Address</div>
                        <div class="complain-description"><i class="fas fa-calendar-alt"></i> @pickUp.PickUpDate.ToString("dd MMM yyyy HH:mm")</div>
                        <div class="card-footer">
                            @if (pickUp.Status == PickUpStatus.PickingUp || pickUp.Status == PickUpStatus.Completed)
                            {
                                <button class="btn btn-small btn-confirm"
                                        data-pickup-id="@pickUp.PickUpId"
                                        type="button"
                                        @(pickUp.Status == PickUpStatus.Completed ? "disabled" : "")>
                                    <i class="fas fa-check fa-lg"></i>
                                    @(pickUp.Status == PickUpStatus.Completed ? "Confirmed" : "Confirm Item")
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-small btn-pickup btn-pickup-action"
                                        data-pickup-id="@pickUp.PickUpId"
                                        type="button">
                                    <i class="fas fa-truck-loading fa-lg"></i> Pick-up
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>
<!-- Confirm Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1">
  <div class="modal-dialog modal-md modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Pick-Up</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" id="confirmModalBody">
        <div class="text-center py-5">
            <div class="spinner-border text-primary"></div>
            <div>Loading...</div>
        </div>
      </div>
    </div>
  </div>
</div>
@section Scripts {
<script>
    $(function () {
        var token = $('input[name="__RequestVerificationToken"]').val();

        // Helper function to update status text and class
        function updateStatus(pickupId, newStatus) {
            var card = $('.order-card-col[data-pickup-id="' + pickupId + '"]');
            var statusDiv = card.find('.order-status');
            statusDiv.text(newStatus);

            // Remove previous status classes
            statusDiv.removeClass('status-default status-warning status-success');

            switch (newStatus) {
                case 'DriverAssigned':
                    statusDiv.addClass('status-default');
                    break;
                case 'PickingUp':
                    statusDiv.addClass('status-warning');
                    break;
                case 'Completed':
                    statusDiv.addClass('status-success');
                    break;
                default:
                    statusDiv.addClass('status-default');
            }
        }

        // Helper to replace Pick-up button with Confirm button on status change to PickingUp
        function switchToConfirmButton(pickupId) {
            var card = $('.order-card-col[data-pickup-id="' + pickupId + '"]');
            var footer = card.find('.card-footer');

            // Remove the Pick-up button
            footer.find('.btn-pickup-action').remove();

            // Add Confirm button
            var btnConfirm = $(`
                <button class="btn btn-small btn-confirm" data-pickup-id="${pickupId}" type="button">
                    <i class="fas fa-check fa-lg"></i> Confirm Item
                </button>
            `);

            // Insert Confirm button before See Location button
            footer.prepend(btnConfirm);
        }

        // Pick-up button AJAX: update status & buttons on success
        $('.btn-pickup-action').on('click', function () {
            var btn = $(this);
            var pickupId = btn.data('pickup-id');
            btn.prop('disabled', true);

            $.post('/Driver/Complains/PickUp', { pickupId: pickupId, __RequestVerificationToken: token })
                .done(function () {
                    // Update status text & class in card header to "PickingUp"
                    updateStatus(pickupId, 'PickingUp');

                    // Switch Pick-up button to Confirm button
                    switchToConfirmButton(pickupId);
                })
                .fail(function () {
                    alert('Failed to update pick-up status.');
                    btn.prop('disabled', false);
                });
        });

        // See Location button
        $('.btn-view-map').on('click', function () {
            var id = $(this).data('pickup-id');
            window.open('/Driver/PickUps/Map/' + id, '_blank');
        });

        // Confirm button: load partial in modal
        $(document).on('click', '.btn-confirm', function () {
            var id = $(this).data('pickup-id');
            $('#confirmModalBody').html('<div class="text-center py-5"><div class="spinner-border"></div><div>Loading...</div></div>');
            $.get('/Driver/Complains/LoadPickUpPartial?pickUpId=' + id, function (data) {
                $('#confirmModalBody').html(data);
                $('#confirmModal').modal('show');
                initConfirmPickupForm(); // rebind JS inside modal if needed
            });
        });

        // Bind OTP Verify button click inside modals or loaded content
        $(document).on('click', '#verifyOtpBtn', function () {
            var btn = $(this);
            var otp = $('#OtpCode').val();
            var pickupId = $('#PickUpId').val();
            var spinner = $('#otpSpinner');
            var icon = $('#otpStatusIcon');
            icon.html('');
            if (!$('#OtpCode')[0].checkValidity()) {
                alert('Please enter a valid 6-digit OTP code.');
                return;
            }
            spinner.removeClass('d-none');
            btn.prop('disabled', true);
            $.ajax({
                url: '@Url.Action("VerifyOtp", "Complains", new { area = "Driver" })',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                data: { pickupId: pickupId, otpCode: otp },
                success: function (data) {
                    spinner.addClass('d-none');
                    btn.prop('disabled', false);
                    if (data.success) {
                        icon.html('<i class="text-success fas fa-check-circle"></i>');
                    } else {
                        icon.html('<i class="text-danger fas fa-times-circle"></i>');
                        alert(data.message);
                    }
                },
                error: function () {
                    spinner.addClass('d-none');
                    btn.prop('disabled', false);
                    alert('An error occurred during OTP verification.');
                }
            });
        });

        // Confirm Pick-Up form submission via AJAX
        $(document).on('submit', '#confirmPickUpForm', function (e) {
            e.preventDefault();
            var form = this;
            var fd = new FormData(form);
            var pickupId = fd.get('PickUpId');

            fetch('/Driver/Complains/ConfirmPickUp', {
                method: 'POST',
                headers: { 'RequestVerificationToken': token },
                body: fd
            })
            .then(r => r.json())
            .then(data => {
                if (data.success) {
                    alert('Pick-Up confirmed successfully.');

                    // Close modal
                    $('#confirmModal').modal('hide');

                    // Update status text & class in card header to "Completed"
                    updateStatus(pickupId, 'Completed');

                    // Disable Confirm button and update text to "Confirmed"
                    var card = $('.order-card-col[data-pickup-id="' + pickupId + '"]');
                    var confirmBtn = card.find('.btn-confirm');

                    confirmBtn.prop('disabled', true).html('<i class="fas fa-check fa-lg"></i> Confirmed');
                } else {
                    alert('Failed to confirm pick-up.');
                }
            })
            .catch(() => {
                alert('An error occurred during confirmation.');
            });
        });
    });

    // Function to rebind form events after modal partial load (currently no special logic needed)
    function initConfirmPickupForm() {
        // Event delegation used, so no explicit rebinding required here.
    }
</script>
}
